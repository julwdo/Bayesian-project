select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- itamtplcost$claim_amount / 1000000
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count)
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
View(itamtplcost_input)
View(rytgaard1990_input)
n = as.numeric(itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count))
n
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- itamtplcost$claim_amount / 1000000
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = as.numeric(itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count))
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
inits_list_ITA <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 1, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 0.002, beta = 0.169, theta = 28.563, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
model_code <- "
model {
for(i in 1:N_y) {
y[i] ~ dpar(alpha, beta)
}
for(i in 1:N_n) {
n[i] ~ dpois(theta)
}
alpha ~ dgamma(1, 0.0001)
beta ~ dgamma(1, 0.0001)I(, min_y)
theta ~ dgamma(1, 0.0001)
}
"
# Initial values for three MCMC chains
inits_list <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 1, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 3.076, beta = 1.625, theta = 3.2, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
# ===================================================
# RUN JAGS MODEL
# ===================================================
set.seed(123)
jags_model <- jags.model(
textConnection(model_code),
data = rytgaard1990_input,
inits = inits_list,
n.chains = 3,
n.adapt = 20000
)
beta_mle
alpha_mle
theta_mle
# Initial values for three MCMC chains
inits_list_ITA <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 1, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 0.169, beta = 0.002, theta = 28.563, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000000, 3)
View(itamtplcost)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000000, digits=3)
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000000, digits=3)
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = as.numeric(itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count))
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000000, 3)
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = as.numeric(itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count))
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
observed_n <- itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count)
theta_mle <- mean(observed_n) # MLE of theta
theta_mle
observed_y <- itamtplcost$claim_amount
beta_mle <- min(observed_y) # MLE of beta
beta_mle
alpha_mle <- 1 / mean(log(observed_y / beta_mle))
alpha_mle
# Initial values for three MCMC chains
inits_list_ITA <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 1, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 0.166, beta = 0.002, theta = 28.563, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
# ===================================================
# LOAD LIBRARIES
# ===================================================
library(CASdatasets)
library(dplyr)
library(rjags)
library(coda)
# ===================================================
# RYTGAARD1990 EXAMPLE DATA
# ===================================================
rytgaard1990_input <- list(
y = c(2.495, 2.120, 2.095, 1.700, 1.650, 1.985, 1.810, 1.625,
3.215, 2.105, 1.765, 1.715, 19.180, 1.915, 1.790, 1.755),
n = c(5, 3, 4, 0, 4)
)
# Add metadata for JAGS model
rytgaard1990_input$N_y <- length(rytgaard1990_input$y)
rytgaard1990_input$N_n <- length(rytgaard1990_input$n)
rytgaard1990_input$min_y <- min(rytgaard1990_input$y)
# ===================================================
# LOAD AND PREPARE CASDATASETS DATA
# ===================================================
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000000, 3)
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = as.numeric(itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count))
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
# ===================================================
# DEFINE BAYESIAN MODEL (POISSON-PARETO)
# ===================================================
model_code <- "
model {
for(i in 1:N_y) {
y[i] ~ dpar(alpha, beta)
}
for(i in 1:N_n) {
n[i] ~ dpois(theta)
}
alpha ~ dgamma(1, 0.0001)
beta ~ dgamma(1, 0.0001)I(, min_y)
theta ~ dgamma(1, 0.0001)
}
"
plot(rytgaard1990_input&y)
plot(rytgaard1990_input$y)
plot(itamtplcost_input$y)
plot(rytgaard1990_input$n)
plot(itamtplcost_input$n)
mean(itamtplcost_input$n)
mean(rytgaard1990_input$n)
1 / mean(log(rytgaard1990_input$y / min(rytgaard1990_input$y)))
observed_n <- itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count)
theta_mle <- mean(observed_n) # MLE of theta
theta_mle
observed_y <- itamtplcost$claim_amount
beta_mle <- min(observed_y) # MLE of beta
beta_mle
alpha_mle <- 1 / mean(log(observed_y / beta_mle))
alpha_mle
summary(itamtplcost_input$y)
summary(rytgaard1990_input$y)
summary(rytgaard1990_input$n)
summary(itamtplcost_input$n)
# Initial values for three MCMC chains
inits_list_ITA <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 1, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 0.166, beta = 0.0019, theta = 28.563, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
# Initial values for three MCMC chains
inits_list_ITA <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 1, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 2,
n.adapt = 20000
)
summary(rytgaard1990_input$y)
summary(itamtplcost_input$y)
summary(rytgaard1990_input$n)
summary(itamtplcost_input$n)
inits_list_ITA <- list(
list(alpha = 0.001, beta = 0.001, theta = 0.01, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100, beta = 0.5, theta = 100, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 0.166, beta = 0.002, theta = 28.563, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
inits_list_ITA <- list(
list(alpha = 0.001, beta = 0.001, theta = 0.01, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100, beta = 0.5, theta = 100, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 2, beta = min_y - epsilon, theta = 30, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
min_y <- min(itamtplcost_input$y)
epsilon <- 1e-6
inits_list_ITA <- list(
list(alpha = 0.001, beta = 0.001, theta = 0.01, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100, beta = 0.5, theta = 100, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 2, beta = min_y - epsilon, theta = 30, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
summary(rytgaard1990_input$y)
summary(itamtplcost_input$y)
0.844/1.863
100000/2
1/1.625
0.6153846*0.002
inits_list_ITA <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 0.0012, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 0.166, beta = 0.002, theta = 28.563, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
# Sample from posterior
samples_ITA <- coda.samples(
jags_model_ITA,
variable.names = c("alpha", "beta", "theta"),
n.iter = 30000
)
summary(samples)
summary(samples_ITA)
plot(density(as.matrix(samples[, "alpha"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "alpha"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "beta"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "theta"])), main="", xlab="", ylab="")
posterior_ITA <- as.matrix(samples)
expected_values_ITA <- pareto_ev(posterior_ITA[, "alpha"], posterior_ITA[, "beta"])
posterior_ITA <- as.matrix(samples_ITA)
expected_values_ITA <- pareto_ev(posterior_ITA[, "alpha"], posterior_ITA[, "beta"])
mean(expected_values_ITA, na.rm=TRUE)
# Compute the average expected claim amount
pareto_ev <- function(a, b) ifelse(a > 1, (a * b) / (a - 1), NA)
posterior_ITA <- as.matrix(samples_ITA)
expected_values_ITA <- pareto_ev(posterior_ITA[, "alpha"], posterior_ITA[, "beta"])
mean(expected_values_ITA, na.rm=TRUE)
sd(expected_values_ITA, na.rm=TRUE)
quantile(expected_values_ITA, c(0.025, 0.5, 0.975), na.rm=TRUE)
plot(density(expected_values_ITA, na.rm=TRUE), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "alpha"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "beta"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "theta"])), main="", xlab="", ylab="")
posterior_ITA <- as.matrix(samples_ITA)
posterior_ITA[, "alpha"]
summary(posterior_ITA[, "alpha"])
summary(posterior_ITA[, "alpha"])
# ===================================================
# LOAD LIBRARIES
# ===================================================
library(CASdatasets)
library(dplyr)
library(rjags)
library(coda)
# ===================================================
# RYTGAARD1990 EXAMPLE DATA
# ===================================================
rytgaard1990_input <- list(
y = c(2.495, 2.120, 2.095, 1.700, 1.650, 1.985, 1.810, 1.625,
3.215, 2.105, 1.765, 1.715, 19.180, 1.915, 1.790, 1.755),
n = c(5, 3, 4, 0, 4)
)
# Add metadata for JAGS model
rytgaard1990_input$N_y <- length(rytgaard1990_input$y)
rytgaard1990_input$N_n <- length(rytgaard1990_input$n)
rytgaard1990_input$min_y <- min(rytgaard1990_input$y)
# ===================================================
# LOAD AND PREPARE CASDATASETS DATA
# ===================================================
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000000, 3)
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = as.numeric(itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count))
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
# ===================================================
# DEFINE BAYESIAN MODEL (POISSON-PARETO)
# ===================================================
model_code <- "
model {
for(i in 1:N_y) {
y[i] ~ dpar(alpha, beta)
}
for(i in 1:N_n) {
n[i] ~ dpois(theta)
}
alpha ~ dgamma(1, 0.0001)
beta ~ dgamma(1, 0.0001)I(, min_y)
theta ~ dgamma(1, 0.0001)
}
"
# Initial values for three MCMC chains
inits_list_ITA <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 123),
list(alpha = 100000, beta = 0.0012, theta = 100000, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 456),
list(alpha = 0.166, beta = 0.002, theta = 28.563, .RNG.name = "base::Wichmann-Hill", .RNG.seed = 789)
)
set.seed(123)
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 20000
)
# Sample from posterior
samples_ITA <- coda.samples(
jags_model_ITA,
variable.names = c("alpha", "beta", "theta"),
n.iter = 30000
)
traceplot(samples_ITA[, c("alpha", "beta", "theta")], main="", xlab="")
summary(posterior_ITA[, "alpha"])
summary(samples_ITA)
summary(samples_ITA[, "alpha"])
posterior_ITA <- as.matrix(samples_ITA)
summary(posterior_ITA[, "alpha"])
summary(samples_ITA)
plot(density(as.matrix(samples_ITA[, "alpha"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "beta"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "theta"])), main="", xlab="", ylab="")
traceplot(samples_ITA[, c("alpha", "beta", "theta")], main="", xlab="")
gelman.diag(samples_ITA, autoburnin = FALSE)
params <- c("alpha", "beta", "theta")
for (param in params) {
gelman.plot(samples_ITA[, param], xlab = "", ylab = "")
}
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 0
)
# Sample from posterior
samples_ITA <- coda.samples(
jags_model_ITA,
variable.names = c("alpha", "beta", "theta"),
n.iter = 30000
)
traceplot(samples_ITA[, c("alpha", "beta", "theta")], main="", xlab="")
gelman.diag(samples_ITA, autoburnin = FALSE)
params <- c("alpha", "beta", "theta")
for (param in params) {
gelman.plot(samples_ITA[, param], xlab = "", ylab = "")
}
jags_model_ITA <- jags.model(
textConnection(model_code),
data = itamtplcost_input,
inits = inits_list_ITA,
n.chains = 3,
n.adapt = 5000
)
# Sample from posterior
samples_ITA <- coda.samples(
jags_model_ITA,
variable.names = c("alpha", "beta", "theta"),
n.iter = 30000
)
summary(samples_ITA)
plot(density(as.matrix(samples_ITA[, "alpha"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "beta"])), main="", xlab="", ylab="")
plot(density(as.matrix(samples_ITA[, "theta"])), main="", xlab="", ylab="")
traceplot(samples_ITA[, c("alpha", "beta", "theta")], main="", xlab="")
gelman.diag(samples_ITA, autoburnin = FALSE)
params <- c("alpha", "beta", "theta")
for (param in params) {
gelman.plot(samples_ITA[, param], xlab = "", ylab = "")
}
View(itamtplcost)
summary(rytgaard1990_input$y)
summary(itamtplcost_input$y)
summary(rytgaard1990_input$n)
summary(itamtplcost_input$n)
plot(rytgaard1990_input$n)
plot(itamtplcost_input$n)
data(itamtplcost)
View(itamtplcost)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000, 3)
# ===================================================
# LOAD AND PREPARE CASDATASETS DATA
# ===================================================
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000, 3)
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
# Express claim_amount in millions
itamtplcost$claim_amount <- round(itamtplcost$claim_amount / 1000, 3)
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = as.numeric(itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count))
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
plot(rytgaard1990_input$n)
plot(itamtplcost_input$n)
summary(rytgaard1990_input$y)
summary(itamtplcost_input$y)
summary(rytgaard1990_input$y)
summary(itamtplcost_input$y)
summary(rytgaard1990_input$n)
summary(itamtplcost_input$n)
6639.500-2.161
19.180-1.625
