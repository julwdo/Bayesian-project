# ===================================================
# LOAD LIBRARIES
# ===================================================
library(CASdatasets)
library(dplyr)
library(rjags)
library(coda)
# ===================================================
# RYTGAARD1990 EXAMPLE DATA
# ===================================================
rytgaard1990_input <- list(
y = c(2.495, 2.120, 2.095, 1.700, 1.650, 1.985, 1.810, 1.625,
3.215, 2.105, 1.765, 1.715, 19.180, 1.915, 1.790, 1.755),
n = c(5, 3, 4, 0, 4)
)
# Add metadata for JAGS model
rytgaard1990_input$N_y <- length(rytgaard1990_input$y)
rytgaard1990_input$N_n <- length(rytgaard1990_input$n)
rytgaard1990_input$min_y <- min(rytgaard1990_input$y)
# ===================================================
# LOAD AND PREPARE CASDATASETS DATA
# ===================================================
data(itamtplcost)
# Extract year and rename 'UltimateCost' for clarity
itamtplcost$year <- format(as.Date(itamtplcost$Date, format = "%d/%m/%Y"), "%Y")
itamtplcost <- itamtplcost %>%
rename(claim_amount = UltimateCost) %>%
select(year, claim_amount)
itamtplcost_input <- list(
y = itamtplcost$claim_amount,
n = itamtplcost %>% group_by(year) %>% summarise(count=n()) %>% pull(count)
)
itamtplcost_input$N_y <- length(itamtplcost_input$y)
itamtplcost_input$N_n <- length(itamtplcost_input$n)
itamtplcost_input$min_y <- min(itamtplcost_input$y)
# ===================================================
# DEFINE BAYESIAN MODEL (POISSON-PARETO)
# ===================================================
model_code <- "
model {
for(i in 1:N_y) {
y[i] ~ dpar(alpha, beta)
}
for(i in 1:N_n) {
n[i] ~ dpois(theta)
}
alpha ~ dgamma(1, 0.0001)
beta ~ dgamma(1, 0.0001)I(, min_y)
theta ~ dgamma(1, 0.0001)
}
"
# Initial values for three MCMC chains
inits_list <- list(
list(alpha = 0.00001, beta = 0.00001, theta = 0.00001),
list(alpha = 100000, beta = 1, theta = 100000),
list(alpha = 3.076, beta = 1.625, theta = 3.2)
)
# ===================================================
# RUN JAGS MODEL
# ===================================================
jags_model <- jags.model(
textConnection(model_code),
data = rytgaard1990_input,
inits = inits_list,
n.chains = 3,
n.adapt = 20000
)
# Sample from posterior
samples <- coda.samples(
jags_model,
variable.names = c("alpha", "beta", "theta"),
n.iter = 50000
)
# Trim the samples (keep 20,000 to 50,000 iterations)
samples_trimmed <- window(samples, start = 1, end = 50000)
samples_trimmed <- window(samples, start = 1, end = 50000)
# Posterior summary & diagnostics
summary(samples_trimmed)
plot(samples_trimmed)
# Compute the average expected claim amount
pareto_ev <- function(a, b) ifelse(a > 1, (a * b) / (a - 1), NA)
posterior <- as.matrix(samples_trimmed)
expected_values <- pareto_ev(posterior[, "alpha"], posterior[, "beta"])
mean(expected_values, na.rm=TRUE)
sd(expected_values, na.rm=TRUE)
quantile(expected_values, c(0.025, 0.5, 0.975), na.rm=TRUE)
# ===================================================
# PLOT 1: EMPIRICAL VS POSTERIOR PARETO CDF
# ===================================================
y <- rytgaard1990_input$y
alpha <- mean(posterior[, "alpha"])
beta <- mean(posterior[, "beta"])
# Define Pareto CDF
pareto_cdf <- function(x, alpha, beta) {
ifelse(x < beta, 0, 1 - (beta / x)^alpha)
}
# Plot empirical CDF
plot(
ecdf(y),
col = "blue",
main = "Empirical vs. Posterior Pareto CDF",
xlab = "Claim Amount",
ylab = "CDF",
lwd = 2
)
# Overlay posterior predictive Pareto CDF
x_vals <- seq(min(y), max(y), length.out = 500)
lines(x_vals, pareto_cdf(x_vals, alpha, beta),
col = "red", lwd = 2, lty = 2)
legend("bottomright",
legend = c("Empirical CDF", "Posterior Pareto CDF"),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# ===================================================
# PLOT 2: EMPIRICAL VS POSTERIOR POISSON CDF
# ===================================================
n <- rytgaard1990_input$n
theta <- mean(posterior[, "theta"])
# Plot empirical CDF for Poisson counts
plot(
ecdf(n),
col = "blue",
main = "Empirical vs. Posterior Poisson CDF",
xlab = "Claim Counts",
ylab = "CDF",
lwd = 2,
xlim = c(min(n), max(n) + 3)  # extend x-axis for visibility
)
# Overlay theoretical Poisson CDF
x_vals <- min(n):(max(n) + 3)
lines(x_vals, ppois(x_vals, lambda = theta),
col = "red", lwd = 2, lty = 2, type = "s")  # 's' for step
legend("bottomright",
legend = c("Empirical CDF", "Posterior Poisson CDF"),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# Trace plots for each parameter
plot(samples[, "alpha"], main = "Trace plot for alpha", xlab = "Iteration", ylab = "alpha")
# Trace plots for each parameter
plot(samples_trimmed[, "alpha"], main = "Trace plot for alpha", xlab = "Iteration", ylab = "alpha")
# Trace plots for each parameter
plot(samples_trimmed[, "alpha"])
plot(samples_trimmed[, "beta"])
plot(samples_trimmed[, "theta"])
# ===================================================
# GELMAN-RUBIN DIAGNOSTIC
# ===================================================
gelman_results <- gelman.diag(samples_trimmed)
# Extract the R-hat statistics (upper line)
r_hat <- gelman_results$psrf[, 1]
# Extract within-chain (lower left) and between-chain (lower right) variances
within_variance <- gelman_results$psrf[, 2]
between_variance <- gelman_results$psrf[, 3]
# Diagnostics
gelman.plot(samples)
# Diagnostics
gelman.diag(samples)
# Diagnostics
gelman.diag(samples_trimmed)
gelman.plot(samples_trimmed)
geweke.diag(samples_trimmed)
raftery.diag(mh.draws, q = 0.025, r = 0.005, s = 0.95)
raftery.diag(samples_trimmed, q = 0.025, r = 0.005, s = 0.95)
jags_model <- jags.model(
textConnection(model_code),
data = rytgaard1990_input,
inits = inits_list,
n.chains = 3,
n.adapt = 0
)
# Sample from posterior
samples <- coda.samples(
jags_model,
variable.names = c("alpha", "beta", "theta"),
n.iter = 50000
)
raftery.diag(samples, q = 0.025, r = 0.005, s = 0.95)
